package com.buaa.ops.Service;

import com.buaa.ops.Entity.Article;
import com.buaa.ops.Entity.Author;
import com.buaa.ops.Entity.Review;
import com.buaa.ops.Entity.Reviewer;

import java.util.ArrayList;

/**
 * The interface ReviewerService contains services related to reviewers,
 * including relations among reviewers, reviews, articles.
 */
public interface ReviewerService {
    /**
     * Assign reviewers for an article. This will insert several records into table "Review".
     * @param articleId Determines which article to assign to
     * @param reviewerIdList An ArrayList containing all reviewerId of target reviewers
     * @return True if this operation succeeded, or false if not
     */
    Boolean assignReviewers(Integer articleId, ArrayList<Integer> reviewerIdList);

    /**
     * Get all articles one reviewer is reviewing, or has reviewed.
     * @param reviewerId Determines whose related articles to be queried
     * @return An ArrayList containing all related articles of the reviewer
     */
    ArrayList<Article> getReviewingArticles(Integer reviewerId);

    /**
     * Submit the review of a reviewer to an article
     * @param review An instance of Review carrying all attributes except reviewId
     * @return True if the submission succeeded, or false if not
     */
    Boolean submitReview(Review review);

    /**
     * Add a new reviewer into the database,
     * The reviewer should have registered an account (accountId != null).
     * @param reviewer An instance of Reviewer carrying all attributes except reviewerId
     * @return The new reviewerId generated by the database, or null if the operation failed
     */
    Integer addReviewer(Reviewer reviewer);

    /**
     * Remove a reviewer from the database. This operation will succeed only if the,
     * Target reviewer is not reviewing any article (in other words, the reviewer is not,
     * Currently responsible for any article which has not been finalized).
     * @param reviewerId Determines which reviewer to be removed
     * @return True if the operation succeeded, or false if not
     */
    Boolean removeReviewer(Integer reviewerId);

    Reviewer getReviewerByAccountId(Integer accountId);
}
