#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace New_OnlineJournal
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="OnLineJournalDatabase")]
	public partial class AuthorAritcleDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertOJAuthor(OJAuthor instance);
    partial void UpdateOJAuthor(OJAuthor instance);
    partial void DeleteOJAuthor(OJAuthor instance);
    partial void InsertArticle(Article instance);
    partial void UpdateArticle(Article instance);
    partial void DeleteArticle(Article instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    #endregion
		
		public AuthorAritcleDataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["OnLineJournalDatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AuthorAritcleDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AuthorAritcleDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AuthorAritcleDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AuthorAritcleDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<OJAuthor> OJAuthor
		{
			get
			{
				return this.GetTable<OJAuthor>();
			}
		}
		
		public System.Data.Linq.Table<Article> Article
		{
			get
			{
				return this.GetTable<Article>();
			}
		}
		
		public System.Data.Linq.Table<Category> Category
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Author")]
	public partial class OJAuthor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _articleid;
		
		private int _authorid;
		
		private EntityRef<Article> _Article;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnarticleidChanging(int value);
    partial void OnarticleidChanged();
    partial void OnauthoridChanging(int value);
    partial void OnauthoridChanged();
    #endregion
		
		public OJAuthor()
		{
			this._Article = default(EntityRef<Article>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_articleid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int articleid
		{
			get
			{
				return this._articleid;
			}
			set
			{
				if ((this._articleid != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnarticleidChanging(value);
					this.SendPropertyChanging();
					this._articleid = value;
					this.SendPropertyChanged("articleid");
					this.OnarticleidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_authorid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int authorid
		{
			get
			{
				return this._authorid;
			}
			set
			{
				if ((this._authorid != value))
				{
					this.OnauthoridChanging(value);
					this.SendPropertyChanging();
					this._authorid = value;
					this.SendPropertyChanged("authorid");
					this.OnauthoridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Author", Storage="_Article", ThisKey="articleid", OtherKey="articleid", IsForeignKey=true)]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.OJAuthor.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.OJAuthor.Add(this);
						this._articleid = value.articleid;
					}
					else
					{
						this._articleid = default(int);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Article")]
	public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _articleid;
		
		private string _title;
		
		private string _abstract;
		
		private string _content;
		
		private string _article_adress;
		
		private System.Nullable<bool> _status;
		
		private EntitySet<OJAuthor> _OJAuthor;
		
		private EntitySet<Category> _Category;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnarticleidChanging(int value);
    partial void OnarticleidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnabstractChanging(string value);
    partial void OnabstractChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    partial void Onarticle_adressChanging(string value);
    partial void Onarticle_adressChanged();
    partial void OnstatusChanging(System.Nullable<bool> value);
    partial void OnstatusChanged();
    #endregion
		
		public Article()
		{
			this._OJAuthor = new EntitySet<OJAuthor>(new Action<OJAuthor>(this.attach_OJAuthor), new Action<OJAuthor>(this.detach_OJAuthor));
			this._Category = new EntitySet<Category>(new Action<Category>(this.attach_Category), new Action<Category>(this.detach_Category));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_articleid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int articleid
		{
			get
			{
				return this._articleid;
			}
			set
			{
				if ((this._articleid != value))
				{
					this.OnarticleidChanging(value);
					this.SendPropertyChanging();
					this._articleid = value;
					this.SendPropertyChanged("articleid");
					this.OnarticleidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(80)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="abstract", Storage="_abstract", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string @abstract
		{
			get
			{
				return this._abstract;
			}
			set
			{
				if ((this._abstract != value))
				{
					this.OnabstractChanging(value);
					this.SendPropertyChanging();
					this._abstract = value;
					this.SendPropertyChanged("@abstract");
					this.OnabstractChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[article adress]", Storage="_article_adress", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string article_adress
		{
			get
			{
				return this._article_adress;
			}
			set
			{
				if ((this._article_adress != value))
				{
					this.Onarticle_adressChanging(value);
					this.SendPropertyChanging();
					this._article_adress = value;
					this.SendPropertyChanged("article_adress");
					this.Onarticle_adressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Bit")]
		public System.Nullable<bool> status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Author", Storage="_OJAuthor", ThisKey="articleid", OtherKey="articleid")]
		public EntitySet<OJAuthor> OJAuthor
		{
			get
			{
				return this._OJAuthor;
			}
			set
			{
				this._OJAuthor.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Category", Storage="_Category", ThisKey="articleid", OtherKey="articleid")]
		public EntitySet<Category> Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				this._Category.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OJAuthor(OJAuthor entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_OJAuthor(OJAuthor entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
		
		private void attach_Category(Category entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_Category(Category entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _articleid;
		
		private string _category1;
		
		private EntityRef<Article> _Article;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnarticleidChanging(int value);
    partial void OnarticleidChanged();
    partial void Oncategory1Changing(string value);
    partial void Oncategory1Changed();
    #endregion
		
		public Category()
		{
			this._Article = default(EntityRef<Article>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_articleid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int articleid
		{
			get
			{
				return this._articleid;
			}
			set
			{
				if ((this._articleid != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnarticleidChanging(value);
					this.SendPropertyChanging();
					this._articleid = value;
					this.SendPropertyChanged("articleid");
					this.OnarticleidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="category", Storage="_category1", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string category1
		{
			get
			{
				return this._category1;
			}
			set
			{
				if ((this._category1 != value))
				{
					this.Oncategory1Changing(value);
					this.SendPropertyChanging();
					this._category1 = value;
					this.SendPropertyChanged("category1");
					this.Oncategory1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Category", Storage="_Article", ThisKey="articleid", OtherKey="articleid", IsForeignKey=true)]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.Category.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.Category.Add(this);
						this._articleid = value.articleid;
					}
					else
					{
						this._articleid = default(int);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
